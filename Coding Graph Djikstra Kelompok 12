class Peta:
    def __init__(self):
        self.listKota = {}

    def printPeta(self):
        for kota in self.listKota:
            print(kota, ":", self.listKota[kota])

    def tambahkanKota(self, kota):
        if kota not in self.listKota:
            self.listKota[kota] = {}
            return True
        return False

    def hapusKota(self, hapusKota):
        if hapusKota in self.listKota:
            for kotaLain in self.listKota:
                if hapusKota in self.listKota[kotaLain]:
                    del self.listKota[kotaLain][hapusKota]
            del self.listKota[hapusKota]
            return True
        return False

    def tambahkanJalan(self, kota1, kota2, jarak):
        if kota1 in self.listKota and kota2 in self.listKota:
            self.listKota[kota2][kota1] = jarak, 'KM'
            self.listKota[kota1][kota2] = jarak, 'KM'
            return True
        return False

    def hapusJalan(self, kota1, kota2):
        if kota1 in self.listKota and kota2 in self.listKota:
            if kota1 in self.listKota[kota2]:
                del self.listKota[kota2][kota1]
            if kota2 in self.listKota[kota1]:
                del self.listKota[kota1][kota2]
            return True
        return False

    def djikstra (self, source):
        jarak = {kota: float('inf') for kota in self.listKota}
        jarak[source] = 0

        unvisitedCities = list(self.listKota.keys())
        while unvisitedCities:
            minJarak = float('inf')
            dekatKota = None

            for kota in unvisitedCities:
                if jarak[kota] < minJarak:
                    minJarak = jarak[kota]
                    dekatKota = kota
            unvisitedCities.remove(dekatKota)

            for neighbor, weight in self.listKota[dekatKota].items():
                jarakNeighbor = jarak[dekatKota] + weight[0]
                if jarakNeighbor < jarak[neighbor]:
                    jarak[neighbor] = jarakNeighbor

        return jarak


petaJerman = Peta()
petaJerman.tambahkanKota("Berlin")
petaJerman.tambahkanKota("Magdeburg")
petaJerman.tambahkanKota("Kassel")
petaJerman.tambahkanKota("Hannover")
petaJerman.tambahkanKota("Bielefeld")
petaJerman.tambahkanKota("Dortmund")
petaJerman.tambahkanKota("Frankurt")
petaJerman.tambahkanKota("Nurnberg")
petaJerman.tambahkanKota("Munchen")
petaJerman.tambahkanKota("Leipzig")
print('------------------------------')
print('Jalan yang terhubung')
petaJerman.tambahkanJalan("Berlin", "Leipzig", 180)
petaJerman.tambahkanJalan("Berlin", "Magdeburg", 150)
petaJerman.tambahkanJalan("Magdeburg", "Leipzig", 120)
petaJerman.tambahkanJalan("Magdeburg", "Hannover", 180)
petaJerman.tambahkanJalan("Leipzig", "Kassel", 250)
petaJerman.tambahkanJalan("Hannover", "Kassel", 160)
petaJerman.tambahkanJalan("Hannover", "Bielefeld", 130)
petaJerman.tambahkanJalan("Bielefeld", "Kassel", 190)
petaJerman.tambahkanJalan("Bielefeld", "Dortmund", 80)
petaJerman.tambahkanJalan("Dortmund", "Frankurt", 250)
petaJerman.tambahkanJalan("Frankurt", "Kassel", 200)
petaJerman.tambahkanJalan("Frankurt", "Nurnberg", 220)
petaJerman.tambahkanJalan("Nurnberg", "Munchen", 170)
petaJerman.printPeta()
print('------------------------------')
#print('Hapus kota kassel dan Dortmund')
#petaJerman.hapusKota("Kassel")
#petaJerman.hapusKota("Dortmund")
petaJerman.djikstra("Berlin")
jarakSemuaKota = petaJerman.djikstra("Berlin")
print("Jarak Kota Berikut Nya dari Berlin")
for kota, jarak in jarakSemuaKota.items():
    print(kota, "adalah", jarak, "KM")
